     1                                  ; ****************************************************************************************************************************
     2                                  ; Program name: "Hello Program".  This program demonstrates how to input and output a string with embedded white  *
     3                                  ; space.  Copyright (C) 2021  Erick Tran                                                                                 *
     4                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ; version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ; A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ; ****************************************************************************************************************************
    10                                  ;
    11                                  ; Author information
    12                                  ;  Author name: Erick Tran
    13                                  ;  Author email: ericktran@csu.fullerton.edu
    14                                  ;
    15                                  ; Program information
    16                                  ;  Program name: Right Triangles
    17                                  ;
    18                                  ; Purpose
    19                                  ;  This program is practice for managing I/O of 64-bit float numbers, and does
    20                                  ;  some calculations for the attributes of a right triangle
    21                                  ;
    22                                  ; Project information
    23                                  ;  Files: pythagoras.c, triangle.asm, run.sh
    24                                  ;
    25                                  ; This file:
    26                                  ;  File name: triangle.asm
    27                                  ;  Language : x86 Assembly
    28                                  ;  Compile: nasm -f elf64 -l triangle.lis -o triangle.o triangle.asm
    29                                  ;  Link: gcc -m64 -no-pie -o pythagoras.out -std=c11 pythagoras.o triangle.o
    30                                  ;
    31                                  ; *****Code area*****
    32                                  
    33                                  extern printf
    34                                  extern scanf
    35                                  extern fgets
    36                                  extern stdin
    37                                  extern strlen
    38                                  global triangle      ;makes hello_world callable by functions outside of file
    39                                  max_name_size equ 32
    40                                  two_point_zero equ 0x4000000000000000  ; 2.0 float value to use for calculating area
    41                                  
    42                                  
    43                                  segment .data
    44                                  
    45                                    align 16
    46 00000000 506C6561736520656E-       prompt_ln_msg db "Please enter your last name: ", 0
    46 00000009 74657220796F757220-
    46 00000012 6C617374206E616D65-
    46 0000001B 3A2000             
    47 0000001E 506C6561736520656E-       prompt_title_msg db "Please enter your title (Mr, Mrs, Nurse, Engineer, etc): ", 0
    47 00000027 74657220796F757220-
    47 00000030 7469746C6520284D72-
    47 00000039 2C204D72732C204E75-
    47 00000042 7273652C20456E6769-
    47 0000004B 6E6565722C20657463-
    47 00000054 293A2000           
    48 00000058 506C6561736520656E-       prompt_triangle_sides_msg db "Please enter the sides of your triangle separated by white space: ", 10, 0
    48 00000061 746572207468652073-
    48 0000006A 69646573206F662079-
    48 00000073 6F757220747269616E-
    48 0000007C 676C65207365706172-
    48 00000085 617465642062792077-
    48 0000008E 686974652073706163-
    48 00000097 653A200A00         
    49 0000009C 546865206172656120-       response_area_msg db "The area of this triangle is %1.18lf square units.", 10, 0
    49 000000A5 6F6620746869732074-
    49 000000AE 7269616E676C652069-
    49 000000B7 732025312E31386C66-
    49 000000C0 207371756172652075-
    49 000000C9 6E6974732E0A00     
    50 000000D0 546865206C656E6774-       response_hypotenuse_msg db "The length of the hypotenuse is %1.18lf units.", 10, 0
    50 000000D9 68206F662074686520-
    50 000000E2 6879706F74656E7573-
    50 000000EB 652069732025312E31-
    50 000000F4 386C6620756E697473-
    50 000000FD 2E0A00             
    51 00000100 506C6561736520656E-       exit_msg db "Please enjoy your triangles %s %s.", 10, 0
    51 00000109 6A6F7920796F757220-
    51 00000112 747269616E676C6573-
    51 0000011B 2025732025732E0A00 
    52                                  
    53 00000124 257300                    stringformat db "%s", 0           ;general string format
    54                                  
    55 00000127 256C6600                  eight_byte_format db "%lf", 0     ;general 8-byte float format
    56                                  
    57                                  
    58                                  segment .bss
    59                                  
    60                                    align 64
    61 00000000 <res 00000340>            backuparea resb 832
    62 00000340 <res 00000020>            name resb max_name_size
    63 00000360 <res 00000010>            title resb 16
    64                                  
    65                                  segment .text
    66                                  
    67                                  triangle:
    68                                  
    69                                    ; Prologue, backup all GPRs
    70 00000000 55                        push rbp
    71 00000001 4889E5                    mov rbp, rsp
    72 00000004 53                        push rbx
    73 00000005 51                        push rcx
    74 00000006 52                        push rdx
    75 00000007 56                        push rsi
    76 00000008 57                        push rdi
    77 00000009 4150                      push r8
    78 0000000B 4151                      push r9
    79 0000000D 4152                      push r10
    80 0000000F 4153                      push r11
    81 00000011 4154                      push r12
    82 00000013 4155                      push r13
    83 00000015 4156                      push r14
    84 00000017 4157                      push r15
    85 00000019 9C                        pushf
    86                                  
    87                                    ; Prompt user for last name
    88 0000001A 4831C0                    xor rax, rax
    89 0000001D 48BF-                     mov rdi, stringformat
    89 0000001F [2401000000000000] 
    90 00000027 48BE-                     mov rsi, prompt_ln_msg
    90 00000029 [0000000000000000] 
    91 00000031 E8(00000000)              call printf
    92                                  
    93                                    ; Get user last name
    94 00000036 4831C0                    xor rax, rax
    95 00000039 48BF-                     mov rdi, name
    95 0000003B [4003000000000000] 
    96 00000043 BE20000000                mov rsi, max_name_size
    97 00000048 488B1425[00000000]        mov rdx, [stdin]
    98 00000050 E8(00000000)              call fgets
    99 00000055 4831C0                    xor rax, rax
   100 00000058 48BF-                     mov rdi, name
   100 0000005A [4003000000000000] 
   101 00000062 E8(00000000)              call strlen
   102 00000067 4989C6                    mov r14, rax
   103 0000006A 4831C0                    xor rax, rax
   104 0000006D 498986[3F030000]          mov [name + r14 - 1], rax
   105                                  
   106                                    ; Prompt user for title
   107 00000074 4831C0                    xor rax, rax
   108 00000077 48BF-                     mov rdi, stringformat
   108 00000079 [2401000000000000] 
   109 00000081 48BE-                     mov rsi, prompt_title_msg
   109 00000083 [1E00000000000000] 
   110 0000008B E8(00000000)              call printf
   111                                  
   112                                    ; Get user title
   113 00000090 4831C0                    xor rax, rax
   114 00000093 48BF-                     mov rdi, title
   114 00000095 [6003000000000000] 
   115 0000009D BE10000000                mov rsi, 16
   116 000000A2 488B1425[00000000]        mov rdx, [stdin]
   117 000000AA E8(00000000)              call fgets
   118 000000AF 4831C0                    xor rax, rax
   119 000000B2 48BF-                     mov rdi, title
   119 000000B4 [6003000000000000] 
   120 000000BC E8(00000000)              call strlen
   121 000000C1 4989C6                    mov r14, rax
   122 000000C4 4831C0                    xor rax, rax
   123 000000C7 498986[5F030000]          mov [title + r14 - 1], rax
   124                                  
   125                                    ; Prompt user for sides of triangle separated by whitespace
   126 000000CE 4831C0                    xor rax, rax
   127 000000D1 48BF-                     mov rdi, stringformat
   127 000000D3 [2401000000000000] 
   128 000000DB 48BE-                     mov rsi, prompt_triangle_sides_msg
   128 000000DD [5800000000000000] 
   129 000000E5 E8(00000000)              call printf
   130                                  
   131                                    ; Get floating point numbers from input and store in xmm0 and xmm1
   132 000000EA 6A00                      push qword 0
   133 000000EC 6A00                      push qword 0
   134 000000EE 48BF-                     mov rdi, eight_byte_format
   134 000000F0 [2701000000000000] 
   135 000000F8 4889E6                    mov rsi, rsp
   136 000000FB E8(00000000)              call scanf
   137 00000100 F2440F101424              movsd xmm10, [rsp]
   138 00000106 58                        pop rax
   139 00000107 58                        pop rax
   140                                  
   141                                    ; push qword 0
   142                                    ; xor rax, rax
   143                                    ; mov rdi, eight_byte_format
   144                                    ; mov rsi, rsp
   145                                    ; call scanf
   146                                    ; movsd xmm11, qword[rsp]
   147                                    ; pop rax
   148                                  
   149                                    ; Test printf
   150 00000108 6A00                      push qword 0
   151 0000010A F2440F111424              movsd [rsp], xmm10
   152 00000110 B801000000                mov rax, 1
   153 00000115 48BF-                     mov rdi, eight_byte_format
   153 00000117 [2701000000000000] 
   154 0000011F E8(00000000)              call printf
   155                                  
   156                                    ; xor rax, rax
   157                                    ; push qword 0
   158                                    ; movsd [rsp], xmm1
   159                                    ; mov rax, 1
   160                                    ; mov rdi, eight_byte_format
   161                                    ; call printf
   162                                  
   163                                    ; Calculate area
   164                                    ;   Divide first leg by 2
   165                                    ; movsd xmm2, xmm0
   166 00000124 49BD00000000000000-       mov r13, qword two_point_zero
   166 0000012D 40                 
   167 0000012E F24D0F2AFD                cvtsi2sd xmm15, r13
   168 00000133 F2450F5EEF                divsd xmm13, xmm15
   169 00000138 F20F101C24                movsd xmm3, [rsp]
   170 0000013D 58                        pop rax
   171                                    ;   Multiply first leg by second leg
   172 0000013E F20F10E1                  movsd xmm4, xmm1
   173 00000142 F20F59E3                  mulsd xmm4, xmm3
   174 00000146 58                        pop rax
   175                                    ;   Save a copy of result before calling printf
   176 00000147 6A00                      push qword 0          ;reserves 8 bytes of storage
   177 00000149 F20F112424                movsd [rsp], xmm4     ;backup placed in reserved storage
   178                                    ;   Show result
   179 0000014E B801000000                mov rax, 1
   180 00000153 48BF-                     mov rdi, response_area_msg
   180 00000155 [9C00000000000000] 
   181 0000015D E8(00000000)              call printf
   182                                  
   183                                    ; Calculate hypotenuse
   184                                    ;fld xmm0, qword[xmm11]
   185                                    ;fsqrt
   186                                    ;fstp qword[xmm11]
   187                                  
   188                                    ; save value of hypotenuse to xmm0 at end
   189                                    ; movsd xmm0, some other xmm
   190                                  
   191                                    ; Exit message
   192 00000162 4831C0                    xor rax, rax
   193 00000165 48BF-                     mov rdi, exit_msg
   193 00000167 [0001000000000000] 
   194 0000016F 48BE-                     mov rsi, title
   194 00000171 [6003000000000000] 
   195 00000179 48BA-                     mov rdx, name
   195 0000017B [4003000000000000] 
   196 00000183 E8(00000000)              call printf
   197                                  
   198                                    ;**Restore pointer to start of stack frame**
   199                                  
   200                                    ; Epilogue. Restore data to values held before this function was called
   201 00000188 9D                        popf
   202 00000189 415F                      pop r15
   203 0000018B 415E                      pop r14
   204 0000018D 415D                      pop r13
   205 0000018F 415C                      pop r12
   206 00000191 415B                      pop r11
   207 00000193 415A                      pop r10
   208 00000195 4159                      pop r9
   209 00000197 4158                      pop r8
   210 00000199 5E                        pop rsi
   211 0000019A 5F                        pop rdi
   212 0000019B 5A                        pop rdx
   213 0000019C 59                        pop rcx
   214 0000019D 5B                        pop rbx
   215 0000019E 5D                        pop rbp   ; Restore base pointer of stack frame of the caller
   216                                  
   217 0000019F C3                        ret
